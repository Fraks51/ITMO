package ru.itmo.wp.model.repository.impl;

import ru.itmo.wp.model.domain.User;
import ru.itmo.wp.model.exception.RepositoryException;
import ru.itmo.wp.model.repository.UserRepository;
import ru.itmo.wp.model.repository.XRepository;
import ru.itmo.wp.model.service.UserService;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class UserRepositoryImpl extends XRepository<User> implements UserRepository {

    @Override
    public User find(long id) {
        try {
            Object[] ret = findResultSet(id, "User");
            return toThis((ResultSetMetaData) ret[0], (ResultSet) ret[1]);
        } catch (SQLException e) {
            throw new RepositoryException("Can't find User.", e);
        }
    }

    @Override
    public User findByLogin(String login) {
        try (PreparedStatement statement = getReadyStatement(makeResponceSelect("User", new String[]{"login"}), new Object[]{login}, false)) {
            try (ResultSet resultSet = statement.executeQuery()) {
                return toThis(statement.getMetaData(), resultSet);
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find User.", e);
        }
    }

    @Override
    public User findByEmail(String email) {
        try (PreparedStatement statement = getReadyStatement(makeResponceSelect("User", new String[]{"email"}), new Object[]{email},  false)) {
            try (ResultSet resultSet = statement.executeQuery()) {
                return toThis(statement.getMetaData(), resultSet);
            }

        } catch (SQLException e) {
            throw new RepositoryException("Can't find User.", e);
        }
    }

    @Override
    public User findByXAndPasswordSha(String login, String passwordSha) {
        try (PreparedStatement statement = getReadyStatement("SELECT * FROM User WHERE login=? OR email=? AND passwordSha=?", new Object[]{login, login, passwordSha},  false)) {
            try (ResultSet resultSet = statement.executeQuery()) {
                return toThis(statement.getMetaData(), resultSet);
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find User.", e);
        }
    }

    @Override
    public List<User> findAll() {
        List<User> users = new ArrayList<>();
        try (PreparedStatement statement = connect("SELECT * FROM User ORDER BY id DESC", false)) {
            try (ResultSet resultSet = statement.executeQuery()) {
                User user;
                while ((user = toThis(statement.getMetaData(), resultSet)) != null) {
                    users.add(user);
                }
            }

        } catch (SQLException e) {
            throw new RepositoryException("Can't find User.", e);
        }
        return users;
    }

    private User toThis(ResultSetMetaData metaData, ResultSet resultSet) throws SQLException {
        if (!resultSet.next()) {
            return null;
        }

        User user = new User();
        for (int i = 1; i <= metaData.getColumnCount(); i++) {
            switch (metaData.getColumnName(i)) {
                case "id":
                    user.setId(resultSet.getLong(i));
                    break;
                case "login":
                    user.setLogin(resultSet.getString(i));
                    break;
                case "creationTime":
                    user.setCreationTime(resultSet.getTimestamp(i));
                    break;
                case "email":
                    user.setEmail(resultSet.getString(i));
                    break;
                default:
                    // No operations.
            }
        }

        return user;
    }

    @Override
    public void save(User user, String passwordSha, String email) {
        try (PreparedStatement statement = getReadyStatement("INSERT INTO `User` (`login`, `passwordSha`, `creationTime`, `email`) VALUES (?, ?, NOW(), ?)", new Object[]{user.getLogin(), passwordSha, email}, true)) {
            if (statement.executeUpdate() != 1) {
                throw new RepositoryException("Can't save User.");
            } else {
                ResultSet generatedKeys = statement.getGeneratedKeys();
                if (generatedKeys.next()) {
                    user.setId(generatedKeys.getLong(1));
                    user.setCreationTime(find(user.getId()).getCreationTime());
                } else {
                    throw new RepositoryException("Can't save User [no autogenerated fields].");
                }
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't save User.", e);
        }
    }

    @Override
    public User findByEmailAndPasswordSha(String email, String passwordSha) {
        try (PreparedStatement statement = getReadyStatement(makeResponceSelect("User", new String[]{"email", "passwordSha"}), new Object[]{email, passwordSha}, false)) {
            try (ResultSet resultSet = statement.executeQuery()) {
                return toThis(statement.getMetaData(), resultSet);
            }

        } catch (SQLException e) {
            throw new RepositoryException("Can't find User.", e);
        }
    }

    public long findCount() {
        try (PreparedStatement statement = connect("SELECT COUNT(id) FROM User", false)) {
            ResultSet resultSet = statement.executeQuery();
            resultSet.first();
            return resultSet.getByte(1);
        } catch (SQLException e) {
            throw new RepositoryException("Can't find Count.", e);
        }
    }
}
