package ru.itmo.wp.model.repository;

import ru.itmo.wp.model.domain.Talk;
import ru.itmo.wp.model.domain.User;
import ru.itmo.wp.model.exception.RepositoryException;

import java.sql.*;
import java.util.ArrayList;
import java.util.List;

public class TalkRepository extends XRepository {

    public void save(Talk talk, User from, User to) {
        talk.setSourceUserId(from.getId());
        talk.setTargetUserId(to.getId());
        try (PreparedStatement statement = getReadyStatement("INSERT INTO `Talk` (`sourceUserId`, `targetUserId`, `text`, `creationTime`) VALUES (?, ?, ?, NOW())", new Object[]{from.getId(), to.getId(), talk.getText()}, true)) {
            if (statement.executeUpdate() != 1) {
                throw new RepositoryException("Can't save Talk.");
            } else {
                ResultSet generatedKeys = statement.getGeneratedKeys();
                if (generatedKeys.next()) {
                    talk.setId(generatedKeys.getLong(1));
                    talk.setCreationTime(find(talk.getId()).getCreationTime());
                } else {
                    throw new RepositoryException("Can't save Talk [no autogenerated fields].");
                }

            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't save Talk.", e);
        }
    }

    public Talk find(long id) {
        try {
            Object[] ret = findResultSet(id, "Talk");
            return toThis((ResultSetMetaData) ret[0], (ResultSet) ret[1]);
        } catch (SQLException e) {
            throw new RepositoryException("Can't find Talk.", e);
        }
    }

    private Talk toThis(ResultSetMetaData metaData, ResultSet resultSet) throws SQLException {
        if (!resultSet.next()) {
            return null;
        }
        Talk talk = new Talk();
        for (int i = 1; i <= metaData.getColumnCount(); i++) {
            switch (metaData.getColumnName(i)) {
                case "id":
                    talk.setId(resultSet.getLong(i));
                    break;
                case "sourceUserId":
                    talk.setSourceUserId(resultSet.getLong(i));
                    break;
                case "targetUserId":
                    talk.setTargetUserId(resultSet.getLong(i));
                    break;
                case "creationTime":
                    talk.setCreationTime(resultSet.getDate(i));
                    break;
                case "text":
                    talk.setText(resultSet.getString(i));
                    break;
                default:
                    // No operations.
            }
        }
        return talk;
    }

    public List<Talk> findAllById(long id) {
        List<Talk> talks = new ArrayList<>();
        try (PreparedStatement statement = getReadyStatement("SELECT * FROM Talk WHERE sourceUserId=? OR targetUserId=? ORDER BY id DESC", new Object[]{id, id}, false)) {
            ResultSet resultSet = statement.executeQuery();
            Talk talk;
            while ((talk = toThis(statement.getMetaData(), resultSet)) != null) {
                talks.add(talk);
            }
        } catch (SQLException e) {
            throw new RepositoryException("Can't find User.", e);
        }
        return talks;
    }
}
